# main_bot.py ‚Äî Orquestado con PolicySwitcher + MT5 + Notificaciones + CycleManager M5 + Control de Posiciones
# -----------------------------------------------------------------------------------
import os
import sys
import csv
import time
import json
import signal
import logging
import threading
import datetime as dt
from dataclasses import dataclass, field
from typing import Dict, Any, List, Optional
from datetime import timezone
import pytz



# Zona horaria local (para logs de cuenta regresiva)
local_tz = pytz.timezone("America/Argentina/Tucuman")

# ---------- PATHS DEL PROYECTO ----------
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
SRC_PATH = os.path.join(PROJECT_ROOT, "src")
for p in (PROJECT_ROOT, SRC_PATH):
    if p not in sys.path:
        sys.path.insert(0, p)

# ---------- IMPORTS DIN√ÅMICOS ----------
# Execution Controller
try:
    from src.live_execution.execution_controller import OptimizedExecutionController as ExecutionController
    EC_IMPORTED = "src"
except Exception:
    try:
        from execution_controller import OptimizedExecutionController as ExecutionController
        EC_IMPORTED = "local"
    except Exception as e:
        print("‚ùå No se pudo importar OptimizedExecutionController:", e)
        raise

# Policy Switcher
try:
    from policy_switcher import PolicySwitcher
except Exception:
    from src.orchestrator.policy_switcher import PolicySwitcher

# Cycle Manager
try:
    from optimized_cycle_manager import OptimizedM5CycleManager
except Exception:
    from src.live_execution.optimized_cycle_manager import OptimizedM5CycleManager

# TradingClient y Notifier (si existen en tu src)
TradingClient = None
Notifier = None
try:
    from src.trading.trading_client import TradingClient as _TC
    TradingClient = _TC
except Exception as e:
    print("‚ö†Ô∏è TradingClient no disponible:", e)

try:
    from src.utils.notifier import Notifier as _NT
    Notifier = _NT
except Exception as e:
    print("‚ö†Ô∏è Notifier no disponible:", e)

# News filter (opcional)
try:
    from src.filters.news_filter import NewsFilter
    NEWS_FILTER_AVAILABLE = True
except Exception:
    NEWS_FILTER_AVAILABLE = False

# MetaTrader5 (opcional)
try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except Exception as e:
    print("‚ö†Ô∏è MetaTrader5 no disponible:", e)
    MT5_AVAILABLE = False


# ---------- LOGGING MEJORADO ----------
class ColoredFormatter(logging.Formatter):
    """Formatter con colores para diferentes tipos de log"""
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Verde
        'WARNING': '\033[33m',   # Amarillo
        'ERROR': '\033[31m',     # Rojo
        'CRITICAL': '\033[35m',  # Magenta
        'RESET': '\033[0m'       # Reset
    }
    def format(self, record):
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
        return super().format(record)


def setup_logging():
    os.makedirs("logs", exist_ok=True)
    logger = logging.getLogger("bot")
    logger.setLevel(logging.INFO)
    fmt = ColoredFormatter("%(asctime)s | %(levelname)s | %(message)s")
    fh = logging.FileHandler("logs/runtime.log", encoding="utf-8")
    file_fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
    fh.setFormatter(file_fmt)
    sh = logging.StreamHandler(sys.stdout)
    sh.setFormatter(fmt)
    if not logger.handlers:
        logger.addHandler(fh)
        logger.addHandler(sh)
    return logger


# ---------- HELPERS ----------
def safe_now_utc():
    return datetime.now(timezone.utc)


def log_signal_for_backtest(row: Dict[str, Any], path: str = "logs/signals_history.csv"):
    """Log mejorado que garantiza el guardado de todas las se√±ales"""
    os.makedirs(os.path.dirname(path), exist_ok=True)
    write_header = not os.path.exists(path)
    try:
        with open(path, "a", newline="", encoding="utf-8") as f:
            fieldnames = [
                "timestamp_utc",
                "symbol",
                "strategy",
                "side",
                "entry_price",
                "atr",
                "ml_confidence",
                "historical_prob",
                "pnl",
                "status",
                "rejection_reason",
                "position_size",
                "ticket"
            ]
            w = csv.DictWriter(f, fieldnames=fieldnames)
            if write_header:
                w.writeheader()
            complete_row = {field: row.get(field, "") for field in fieldnames}
            w.writerow(complete_row)
        return True
    except Exception as e:
        print(f"‚ùå Error guardando log de se√±al: {e}")
        return False


def format_signal_output(symbol: str, strategy: str, signal_data: Dict, verdict: Dict = None,
                        execution_result: Dict = None, news_blocked: bool = False, 
                        position_blocked: bool = False) -> str:
    separator = "=" * 80
    header = f"\n{separator}\nüéØ SE√ëAL DETECTADA: {symbol} | Estrategia: {strategy.upper()}\n{separator}"
    signal_info = (f"\nüìä DATOS DE LA SE√ëAL:"
                   f"\n   ‚Ä¢ Acci√≥n: {signal_data.get('action', 'N/A').upper()}"
                   f"\n   ‚Ä¢ Precio entrada: {signal_data.get('entry_price', 'N/A')}"
                   f"\n   ‚Ä¢ ATR: {signal_data.get('atr', 'N/A')}"
                   f"\n   ‚Ä¢ Timestamp: {safe_now_utc().strftime('%H:%M:%S UTC')}")
    
    prob_info = ""
    if not position_blocked:  # Solo mostrar si la se√±al lleg√≥ a procesarse
        prob_info = (f"\nüìà AN√ÅLISIS DE PROBABILIDADES:"
                     f"\n   ‚Ä¢ Confianza ML: {signal_data.get('confidence', 1.0):.3f} ({signal_data.get('confidence', 1.0)*100:.1f}%)"
                     f"\n   ‚Ä¢ Probabilidad Hist√≥rica: {signal_data.get('historical_prob', 1.0):.3f} ({signal_data.get('historical_prob', 1.0)*100:.1f}%)")
    
    decision_info = ""
    if position_blocked:
        decision_info = (f"\nüîí DECISI√ìN: BLOQUEADA POR POSICI√ìN EXISTENTE"
                         f"\n   ‚Ä¢ Raz√≥n: Ya existe una posici√≥n abierta para {symbol}")
    elif news_blocked:
        decision_info = (f"\nüö´ DECISI√ìN: BLOQUEADA POR NOTICIAS"
                         f"\n   ‚Ä¢ Raz√≥n: Evento de noticias detectado para {symbol}")
    elif verdict:
        if verdict.get("approved", False):
            decision_info = (f"\n‚úÖ DECISI√ìN: APROBADA"
                             f"\n   ‚Ä¢ Tama√±o posici√≥n: {verdict.get('position_size', 'N/A')} lotes"
                             f"\n   ‚Ä¢ Raz√≥n: {verdict.get('reason', 'Criterios cumplidos')}")
        else:
            decision_info = (f"\nüö´ DECISI√ìN: RECHAZADA"
                             f"\n   ‚Ä¢ Raz√≥n: {verdict.get('reason', 'Criterios no cumplidos')}"
                             f"\n   ‚Ä¢ Tama√±o calculado: {verdict.get('position_size', 0)} lotes")
    
    execution_info = ""
    if execution_result:
        if execution_result.get("ticket"):
            execution_info = (f"\nüéØ EJECUCI√ìN: EXITOSA"
                              f"\n   ‚Ä¢ Ticket: {execution_result.get('ticket')}"
                              f"\n   ‚Ä¢ Precio ejecutado: {execution_result.get('price', 'N/A')}")
        else:
            execution_info = (f"\n‚ùå EJECUCI√ìN: FALLIDA"
                              f"\n   ‚Ä¢ Error: {execution_result.get('error', 'Error desconocido')}")
    
    footer = f"\n{separator}\n"
    return header + signal_info + prob_info + decision_info + execution_info + footer


def init_mt5_from_config(global_cfg: Dict[str, Any], logger: logging.Logger) -> bool:
    """Inicializa MT5 aceptando 'mt5' o 'mt5_credentials' en el config."""
    if not MT5_AVAILABLE:
        logger.info("‚ÑπÔ∏è MT5 no disponible en el entorno.")
        return False
    mt5_obj = (global_cfg or {}).get("mt5", None)
    mt5_creds = (global_cfg or {}).get("mt5_credentials", None)
    cfg = {}
    if isinstance(mt5_obj, dict):
        cfg.update(mt5_obj)
    if isinstance(mt5_creds, dict):
        cfg.setdefault("enabled", True)
        cfg["login"] = cfg.get("login", mt5_creds.get("login"))
        cfg["password"] = cfg.get("password", mt5_creds.get("password"))
        cfg["server"] = cfg.get("server", mt5_creds.get("server"))
        cfg["path"] = cfg.get("path", mt5_creds.get("path"))
    if not cfg:
        logger.info("‚ÑπÔ∏è MT5 deshabilitado por configuraci√≥n.")
        return False
    enabled = cfg.get("enabled", True)
    if not enabled:
        logger.info("‚ÑπÔ∏è MT5 deshabilitado por configuraci√≥n.")
        return False
    path = cfg.get("path")
    login = cfg.get("login")
    password = cfg.get("password")
    server = cfg.get("server")
    ok = mt5.initialize(path) if path else mt5.initialize()
    if not ok:
        logger.error(f"‚ùå MT5 initialize fall√≥: {mt5.last_error()}")
        return False
    if login and password and server:
        try:
            l_ok = mt5.login(int(login), password=password, server=server)
        except Exception:
            l_ok = mt5.login(login, password=password, server=server)
        if not l_ok:
            logger.error(f"‚ùå MT5 login fall√≥: {mt5.last_error()}")
            return False
        logger.info(f"‚úÖ MT5 conectado: login={login}, server={server}")
    else:
        logger.info("‚úÖ MT5 inicializado (sin login expl√≠cito).")
    return True


def shutdown_mt5(logger: logging.Logger):
    if MT5_AVAILABLE:
        try:
            mt5.shutdown()
            logger.info("üõë MT5 shutdown OK.")
        except Exception:
            pass


STRATEGY_MAPPING = {
    "ema_crossover": "ema_crossover",
    "EMA Crossover": "ema_crossover",
    "multi_filter_scalper": "multi_filter_scalper",
    "MultiFilterScalper": "multi_filter_scalper",
    "rsi_pullback": "rsi_pullback",
    "RSI Pullback": "rsi_pullback",
    "volatility_breakout": "volatility_breakout",
    "Volatility Breakout": "volatility_breakout",
    "channel_reversal": "channel_reversal",
    "Channel Reversal": "channel_reversal",
    "lokz_reversal": "lokz_reversal",
    "LokzReversal": "lokz_reversal",
}


@dataclass
class ControllerSpec:
    symbol: str
    strategy: str
    params: Dict[str, Any] = field(default_factory=dict)


# ---------- BOT ----------
class OrchestratedMT5Bot:
    def __init__(
        self,
        config_path: str = "configs/global_config.json",
        risk_path: str = "configs/risk_config.json",
        orch_cfg_path: str = "orchestrator_config.json",
        insights_path: str = "reports/global_insights.json",
        base_lots: float = 0.10,
        cycle_seconds: int = 30,
    ):
        os.environ.setdefault("OMP_NUM_THREADS", "1")
        os.environ.setdefault("MKL_NUM_THREADS", "1")

        self.logger = setup_logging()
        self.base_lots = base_lots
        self.cycle_seconds = cycle_seconds
        self.stop_event = threading.Event()

        # Estad√≠sticas del bot (ampliadas)
        self.stats = {
            "signals_generated": 0,
            "signals_approved": 0,
            "signals_rejected": 0,
            "signals_executed": 0,
            "signals_blocked_by_position": 0,  # NUEVA ESTAD√çSTICA
            "news_blocks": 0,
            "execution_errors": 0
        }

        # 1) Configs
        self.global_cfg = self._load_json(config_path, "global_config")
        self.risk_cfg = self._load_json(risk_path, "risk_config")
        self.timeframe = self.global_cfg.get("timeframe", "M5")

        # 2) Notifier
        self.notifier = self._setup_notifier()

        # 3) News filter (opcional)
        self.news_filter = self._setup_news_filter()

        # 4) MT5 (si aplica)
        self.mt5_connected = init_mt5_from_config(self.global_cfg, self.logger)

        # 5) TradingClient
        self.client = self._setup_trading_client()

        # 6) Policy switcher
        self.policy = PolicySwitcher(config_path=orch_cfg_path, global_insights_path=insights_path)

        # 7) Controllers
        self.controllers = self._build_controllers()

        # 8) Cycle manager
        self.cycle_mgr = OptimizedM5CycleManager()

        # 9) Se√±ales del sistema
        self._setup_signals()

        self.logger.info("‚úÖ Bot MT5 orquestado inicializado con control de posiciones.")
        self._print_startup_summary()

    def _print_startup_summary(self):
        print("\n" + "="*80)
        print("üöÄ BOT MT5 ORQUESTADO - RESUMEN DE CONFIGURACI√ìN")
        print("="*80)
        print(f"üìä Timeframe: {self.timeframe}")
        print(f"üí∞ Lotes base: {self.base_lots}")
        print(f"‚è±Ô∏è  Ciclo: {self.cycle_seconds}s")
        print(f"üéØ Controllers activos: {len(self.controllers)}")
        if self.controllers:
            print("\nüìà INSTRUMENTOS Y ESTRATEGIAS:")
            for i, c in enumerate(self.controllers, 1):
                print(f"   {i}. {c.symbol} ‚Üí {c.strategy_name}")
        print(f"\nüîå Conexiones:")
        print(f"   ‚Ä¢ MT5: {'‚úÖ Conectado' if self.mt5_connected else '‚ùå Desconectado'}")
        print(f"   ‚Ä¢ TradingClient: {'‚úÖ Activo' if self.client else '‚ùå No disponible'}")
        print(f"   ‚Ä¢ Notifier: {'‚úÖ Activo' if self.notifier else '‚ùå No disponible'}")
        print(f"   ‚Ä¢ NewsFilter: {'‚úÖ Activo' if self.news_filter else '‚ùå No disponible'}")
        print(f"\nüîí CONTROL DE POSICIONES: ACTIVADO")
        print("   ‚Ä¢ Prevenci√≥n de m√∫ltiples posiciones por s√≠mbolo")
        print("   ‚Ä¢ Verificaci√≥n en tiempo real con MT5")
        print("="*80 + "\n")

    # --------- setup ---------
    def _load_json(self, path, name):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            self.logger.info(f"‚úÖ {name} cargado: {path}")
            return data
        except Exception as e:
            self.logger.error(f"‚ùå No se pudo cargar {name} en {path}: {e}")
            raise

    def _setup_notifier(self):
        if Notifier is None:
            self.logger.info("‚ÑπÔ∏è Notifier no disponible.")
            return None
        try:
            notifier = Notifier()
            try:
                notifier.send("üöÄ Bot iniciado", "Bot MT5 orquestado en ejecuci√≥n con control de posiciones.")
            except Exception:
                if hasattr(notifier, "send_notification"):
                    notifier.send_notification("üöÄ Bot iniciado", "Bot MT5 orquestado en ejecuci√≥n con control de posiciones.")
            self.logger.info("‚úÖ Notifier activo.")
            return notifier
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è No se pudo inicializar Notifier: {e}")
            return None

    def _setup_news_filter(self):
        if not NEWS_FILTER_AVAILABLE:
            return None
        try:
            symbols = []
            if self.global_cfg:
                if "controllers" in self.global_cfg:
                    symbols = sorted(set([c["symbol"] for c in self.global_cfg["controllers"]]))
                else:
                    symbols = self.global_cfg.get("trading_symbols", [])
            nf = NewsFilter(symbols_to_monitor=symbols)
            self.logger.info(f"‚úÖ NewsFilter activo para {len(symbols)} s√≠mbolos.")
            return nf
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è NewsFilter no inicializado: {e}")
            return None

    def _news_blocks(self, symbol, when=None):
        """Devuelve True si hay evento bloqueante para el s√≠mbolo. Soporta m√∫ltiples firmas."""
        if not self.news_filter:
            return False
        cand_methods = [
            "should_block", "should_block_symbol", "should_block_trade",
            "blocks", "is_blocked", "has_blocking_event", "has_event", "block_trade"
        ]
        for m in cand_methods:
            if hasattr(self.news_filter, m):
                fn = getattr(self.news_filter, m)
                try:
                    return bool(fn(symbol, when)) if when is not None else bool(fn(symbol))
                except TypeError:
                    try:
                        return bool(fn(symbol))
                    except Exception:
                        continue
                except Exception:
                    continue
        try:
            blocked = getattr(self.news_filter, "blocked_symbols", None)
            if isinstance(blocked, (set, list, tuple)) and symbol in blocked:
                return True
        except Exception:
            pass
        return False

    def _setup_trading_client(self):
        """Inicializa TradingClient probando distintas firmas comunes."""
        if TradingClient is None:
            self.logger.warning("‚ö†Ô∏è TradingClient no disponible. Se ejecutar√° en modo no-operativo.")
            return None
        mt5_obj = (self.global_cfg or {}).get("mt5", {}) or {}
        mt5_creds = (self.global_cfg or {}).get("mt5_credentials", {}) or {}
        creds = {}
        creds.update(mt5_obj)
        creds.update(mt5_creds)
        login = creds.get("login")
        password = creds.get("password")
        server = creds.get("server")
        magic_number = (self.global_cfg or {}).get("magic_number") or creds.get("magic_number")
        try:
            login = int(login) if login is not None and str(login).isdigit() else login
        except Exception:
            pass
        missing = [k for k, v in [("login", login), ("password", password), ("server", server), ("magic_number", magic_number)]
                   if v in (None, "", "xxx", "xxxxx")]
        if missing:
            self.logger.warning(f"‚ö†Ô∏è TradingClient no inicializado: faltan campos {missing}. "
                                f"Revisa 'mt5'/'mt5_credentials' y 'magic_number' en configs/global_config.json.")
            return None
        attempts = [
            ("positional", lambda: TradingClient(login, password, server, magic_number)),
            ("keywords",  lambda: TradingClient(login=login, password=password, server=server, magic_number=magic_number)),
            ("kwargs+magic", lambda: TradingClient(**{
                "login": login, "password": password, "server": server, "magic_number": magic_number
            })),
            ("global_cfg", lambda: TradingClient(self.global_cfg)),
        ]
        last_err = None
        for name, ctor in attempts:
            try:
                client = ctor()
                for m in ("connect", "initialize", "init"):
                    if hasattr(client, m):
                        try:
                            getattr(client, m)()
                            break
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è TradingClient.{m} fall√≥ en intento {name}: {e}")
                self.logger.info(f"‚úÖ TradingClient inicializado (m√©todo: {name}).")
                return client
            except TypeError as e:
                last_err = e
                self.logger.debug(f"Firma {name} no compatible: {e}")
            except Exception as e:
                last_err = e
                self.logger.warning(f"‚ö†Ô∏è TradingClient intento {name} fall√≥: {e}")
        self.logger.error(f"‚ùå No se pudo inicializar TradingClient con ninguna firma. √öltimo error: {last_err}")
        return None

    def _build_controllers(self) -> List[ExecutionController]:
        controllers: List[ExecutionController] = []
        specs: List[ControllerSpec] = []
        
        if self.global_cfg and "controllers" in self.global_cfg:
            for item in self.global_cfg["controllers"]:
                specs.append(
                    ControllerSpec(
                        symbol=item["symbol"],
                        strategy=STRATEGY_MAPPING.get(item["strategy"], item["strategy"]),
                        params=item.get("params", {}),
                    )
                )
        else:
            symbols = self.global_cfg.get("trading_symbols", []) if self.global_cfg else []
            default_strategy = "ema_crossover"
            for s in symbols:
                specs.append(ControllerSpec(symbol=s, strategy=default_strategy, params={}))
        
        for sp in specs:
            try:
                c = ExecutionController(
                    trading_client=self.client,
                    symbol=sp.symbol,
                    strategy_name=sp.strategy,
                    strategy_params=sp.params,
                    notifier=self.notifier,
                )
                setattr(c, "timeframe", self.timeframe)
                # üîí VINCULAR POLICY SWITCHER AL CONTROLLER PARA VERIFICACI√ìN DE POSICIONES
                c.set_policy_switcher(self.policy)
                controllers.append(c)
            except Exception as e:
                self.logger.error(f"‚ùå No se pudo crear controller {sp.symbol}/{sp.strategy}: {e}")
        
        self.logger.info(f"‚úÖ Controllers construidos: {len(controllers)} (con control de posiciones)")
        return controllers

    def _setup_signals(self):
        def _handle_stop(signum, frame):
            self.logger.info("‚èπÔ∏è  Se√±al de parada recibida, cerrando bot...")
            self._print_final_stats()
            self.stop_event.set()
        for s in (signal.SIGINT, signal.SIGTERM):
            try:
                signal.signal(s, _handle_stop)
            except Exception:
                pass

    def _print_final_stats(self):
        print("\n" + "="*80)
        print("üìä ESTAD√çSTICAS FINALES DEL BOT")
        print("="*80)
        print(f"üéØ Se√±ales generadas: {self.stats['signals_generated']}")
        print(f"‚úÖ Se√±ales aprobadas: {self.stats['signals_approved']}")
        print(f"üö´ Se√±ales rechazadas: {self.stats['signals_rejected']}")
        print(f"üîí Bloqueadas por posici√≥n: {self.stats['signals_blocked_by_position']}")  # NUEVA ESTAD√çSTICA
        print(f"üí∞ Operaciones ejecutadas: {self.stats['signals_executed']}")
        print(f"üì∞ Bloqueadas por noticias: {self.stats['news_blocks']}")
        print(f"‚ùå Errores de ejecuci√≥n: {self.stats['execution_errors']}")
        
        if self.stats['signals_generated'] > 0:
            approval_rate = (self.stats['signals_approved'] / self.stats['signals_generated']) * 100
            position_block_rate = (self.stats['signals_blocked_by_position'] / self.stats['signals_generated']) * 100
            execution_rate = (self.stats['signals_executed'] / self.stats['signals_approved']) * 100 if self.stats['signals_approved'] > 0 else 0
            print(f"\nüìà Tasa de aprobaci√≥n: {approval_rate:.1f}%")
            print(f"üîí Tasa de bloqueo por posici√≥n: {position_block_rate:.1f}%")
            print(f"üéØ Tasa de ejecuci√≥n: {execution_rate:.1f}%")
        print("="*80 + "\n")

    def _verify_no_existing_position(self, symbol: str) -> bool:
        """
        Verificaci√≥n adicional a nivel de bot para evitar posiciones duplicadas.
        Devuelve True si NO hay posici√≥n (es seguro operar), False si hay posici√≥n.
        """
        # 1. Verificar en MT5 directamente (m√°s confiable)
        if MT5_AVAILABLE:
            try:
                positions = mt5.positions_get(symbol=symbol)
                if positions and len(positions) > 0:
                    self.logger.warning(f"üîí [{symbol}] Posici√≥n detectada en MT5 (verificaci√≥n bot): {len(positions)} posici√≥n(es)")
                    return False
            except Exception as e:
                self.logger.debug(f"Error verificando MT5 en bot: {e}")

        # 2. Verificar en PolicySwitcher
        try:
            if hasattr(self.policy, 'open_positions'):
                open_positions = getattr(self.policy, 'open_positions', {})
                symbol_positions = [pos for pos in open_positions.values() 
                                  if isinstance(pos, dict) and pos.get('symbol') == symbol]
                if symbol_positions:
                    self.logger.warning(f"üîí [{symbol}] Posici√≥n detectada en PolicySwitcher (verificaci√≥n bot): {len(symbol_positions)} posici√≥n(es)")
                    return False
        except Exception as e:
            self.logger.debug(f"Error verificando PolicySwitcher en bot: {e}")

        # 3. No hay posiciones detectadas - es seguro operar
        return True

    # --------- loop ---------
    def run(self):
        self.logger.info("üöÄ Iniciando loop principal (CycleManager M5 + Control de Posiciones)...")
        while not self.stop_event.is_set():
            try:
                plan = self.cycle_mgr.get_cycle_plan(self.controllers)
                if plan["action"] == "analyze_new_candle":
                    controllers_to_process = plan["controllers_to_process"]
                    t_cycle_start = time.perf_counter()
                    for c in controllers_to_process:
                        t0 = time.perf_counter()
                        had_signal = False
                        confirmed = False
                        position_blocked = False
                        try:
                            signal_data = c.get_trading_signal()
                            if not signal_data:
                                # Si get_trading_signal() retorna None, podr√≠a ser por posici√≥n existente
                                # pero no lo contamos como se√±al generada si no hay datos de se√±al
                                continue
                            
                            # Se√±al detectada - incrementar contador
                            had_signal = True
                            self.stats['signals_generated'] += 1

                            # Verificar si la se√±al fue bloqueada por posici√≥n existente en el controller
                            # (esto se detecta por la ausencia de datos de confianza/probabilidad)
                            if (signal_data.get('confidence') is None and 
                                signal_data.get('historical_prob') is None):
                                position_blocked = True
                                self.stats['signals_blocked_by_position'] += 1
                                
                                log_data = {
                                    "timestamp_utc": safe_now_utc().isoformat(),
                                    "symbol": c.symbol,
                                    "strategy": c.strategy_name,
                                    "side": signal_data.get("action"),
                                    "entry_price": signal_data.get("entry_price"),
                                    "atr": signal_data.get("atr", 0.0),
                                    "ml_confidence": 0.0,
                                    "historical_prob": 0.0,
                                    "pnl": "",
                                    "status": "position_blocked",
                                    "rejection_reason": "Posici√≥n existente detectada",
                                    "position_size": 0,
                                    "ticket": ""
                                }
                                log_signal_for_backtest(log_data)
                                
                                output = format_signal_output(c.symbol, c.strategy_name, signal_data,
                                                            position_blocked=True)
                                print(output)
                                continue

                            # üîí VERIFICACI√ìN ADICIONAL A NIVEL DE BOT
                            if not self._verify_no_existing_position(c.symbol):
                                position_blocked = True
                                self.stats['signals_blocked_by_position'] += 1
                                
                                log_data = {
                                    "timestamp_utc": safe_now_utc().isoformat(),
                                    "symbol": c.symbol,
                                    "strategy": c.strategy_name,
                                    "side": signal_data.get("action"),
                                    "entry_price": signal_data.get("entry_price"),
                                    "atr": signal_data.get("atr", 0.0),
                                    "ml_confidence": signal_data.get("confidence", 1.0),
                                    "historical_prob": signal_data.get("historical_prob", 1.0),
                                    "pnl": "",
                                    "status": "position_blocked",
                                    "rejection_reason": "Posici√≥n existente (verificaci√≥n bot)",
                                    "position_size": 0,
                                    "ticket": ""
                                }
                                log_signal_for_backtest(log_data)
                                
                                output = format_signal_output(c.symbol, c.strategy_name, signal_data,
                                                            position_blocked=True)
                                print(output)
                                continue

                            # Log inicial de se√±al generada
                            log_data = {
                                "timestamp_utc": safe_now_utc().isoformat(),
                                "symbol": c.symbol,
                                "strategy": c.strategy_name,
                                "side": signal_data.get("action"),
                                "entry_price": signal_data.get("entry_price"),
                                "atr": signal_data.get("atr", 0.0),
                                "ml_confidence": signal_data.get("confidence", 1.0),
                                "historical_prob": signal_data.get("historical_prob", 1.0),
                                "pnl": "",
                                "status": "generated",
                                "rejection_reason": "",
                                "position_size": 0,
                                "ticket": ""
                            }
                            log_saved = log_signal_for_backtest(log_data)
                            if not log_saved:
                                self.logger.warning(f"‚ö†Ô∏è No se pudo guardar log inicial para {c.symbol}")

                            # Verificar noticias
                            news_blocked = False
                            if self._news_blocks(c.symbol, safe_now_utc()):
                                news_blocked = True
                                self.stats['news_blocks'] += 1
                                log_data.update({
                                    "status": "news_blocked",
                                    "rejection_reason": "Evento de noticias detectado"
                                })
                                log_signal_for_backtest(log_data)
                                output = format_signal_output(c.symbol, c.strategy_name, signal_data,
                                                            news_blocked=True)
                                print(output)
                                continue

                            # Policy approval
                            payload = {
                                "atr": float(signal_data.get("atr", 0.0) or 0.0),
                                "confidence": float(signal_data.get("confidence", 1.0) or 1.0),
                                "historical_prob": float(signal_data.get("historical_prob", 1.0) or 1.0),
                                "base_lots": self.base_lots,
                                "now_utc": safe_now_utc(),
                            }
                            verdict = self.policy.approve_signal(
                                c.symbol, c.strategy_name, signal_data["action"], payload
                            )
                            
                            execution_result = None
                            if verdict["approved"] and verdict["position_size"] > 0:
                                self.stats['signals_approved'] += 1
                                log_data.update({
                                    "status": "approved",
                                    "rejection_reason": "",
                                    "position_size": verdict["position_size"]
                                })
                                log_signal_for_backtest(log_data)
                                
                                # üîí VERIFICACI√ìN FINAL ANTES DE EJECUCI√ìN
                                if not self._verify_no_existing_position(c.symbol):
                                    self.logger.error(f"üîí [{c.symbol}] EJECUCI√ìN CANCELADA: Posici√≥n detectada en verificaci√≥n final")
                                    self.stats['signals_blocked_by_position'] += 1
                                    log_data.update({
                                        "status": "position_blocked",
                                        "rejection_reason": "Posici√≥n existente (verificaci√≥n final)"
                                    })
                                    log_signal_for_backtest(log_data)
                                    continue

                                res = c.execute_trade_with_size(signal_data, verdict["position_size"])
                                execution_result = res
                                if res and res.get("ticket"):
                                    confirmed = True
                                    self.stats['signals_executed'] += 1
                                    ticket = res["ticket"]
                                    log_data.update({
                                        "status": "executed",
                                        "ticket": ticket
                                    })
                                    log_signal_for_backtest(log_data)
                                    self.policy.register_open(
                                        ticket, c.symbol, signal_data["action"], verdict["position_size"]
                                    )
                                    if self.notifier:
                                        try:
                                            self.notifier.send(
                                                f"‚úÖ Trade {c.symbol} {signal_data['action']}",
                                                f"Lots: {verdict['position_size']}\n"
                                                f"Price: {signal_data['entry_price']}\nATR: {signal_data.get('atr')}",
                                            )
                                        except Exception:
                                            if hasattr(self.notifier, "send_notification"):
                                                self.notifier.send_notification(
                                                    f"‚úÖ Trade {c.symbol} {signal_data['action']}",
                                                    f"Lots: {verdict['position_size']}\n"
                                                    f"Price: {signal_data['entry_price']}\nATR: {signal_data.get('atr')}",
                                                )
                                else:
                                    self.stats['execution_errors'] += 1
                                    log_data.update({
                                        "status": "execution_failed",
                                        "rejection_reason": res.get('error', 'Error de ejecuci√≥n desconocido') if res else 'Sin respuesta del broker'
                                    })
                                    log_signal_for_backtest(log_data)
                            else:
                                self.stats['signals_rejected'] += 1
                                log_data.update({
                                    "status": "rejected",
                                    "rejection_reason": verdict.get('reason', 'Criterios no cumplidos'),
                                    "position_size": verdict.get('position_size', 0)
                                })
                                log_signal_for_backtest(log_data)
                            
                            output = format_signal_output(c.symbol, c.strategy_name, signal_data,
                                                        verdict, execution_result, news_blocked, position_blocked)
                            print(output)
                            
                        except Exception as e:
                            self.logger.exception(f"‚ùå Error procesando controller {c.symbol}/{c.strategy_name}: {e}")
                        finally:
                            proc_time = time.perf_counter() - t0
                            self.cycle_mgr.update_controller_metrics(c, proc_time, had_signal, confirmed)

                    cycle_time = time.perf_counter() - t_cycle_start
                    summary_msg = (f"üîÑ Ciclo completado: {len(controllers_to_process)} controllers en {cycle_time:.2f}s "
                                   f"| Gen: {self.stats['signals_generated']} "
                                   f"| Apr: {self.stats['signals_approved']} "
                                   f"| Exec: {self.stats['signals_executed']} "
                                   f"| Pos‚ùå: {self.stats['signals_blocked_by_position']} "
                                   f"(plan={plan.get('reason')})")
                    self.logger.info(summary_msg)

                    # ‚è± Cuenta regresiva hasta la pr√≥xima verificaci√≥n (UTC y Local)
                    next_at = plan.get("next_check_at")
                    if next_at:
                        try:
                            target = datetime.fromisoformat(next_at)
                            nowu = datetime.now(timezone.utc)
                            delta = target - nowu
                            total = max(0, int(delta.total_seconds()))
                            mm, ss = divmod(total, 60)
                            hh, mm = divmod(mm, 60)
                            local_str = target.astimezone(local_tz).strftime('%H:%M:%S')
                            self.logger.info(
                                f"‚è± Pr√≥xima verificaci√≥n en {hh:02d}:{mm:02d}:{ss:02d} "
                                f"(UTC {target.strftime('%H:%M:%S')} | Local {local_str})"
                            )
                        except Exception:
                            pass

                    time.sleep(max(1, int(plan.get("wait_seconds", self.cycle_seconds))))

                elif plan["action"] in ("wait_for_stability", "wait_for_next_candle"):
                    wait_msg = (f"‚è≥ {plan['reason']} (espera {plan['wait_seconds']}s) | "
                                f"Stats: G:{self.stats['signals_generated']} "
                                f"A:{self.stats['signals_approved']} E:{self.stats['signals_executed']} "
                                f"Pos‚ùå:{self.stats['signals_blocked_by_position']}")
                    self.logger.info(wait_msg)

                    # ‚è± Cuenta regresiva tambi√©n durante la espera
                    next_at = plan.get("next_check_at")
                    if next_at:
                        try:
                            target = datetime.fromisoformat(next_at)
                            nowu = datetime.now(timezone.utc)
                            delta = target - nowu
                            total = max(0, int(delta.total_seconds()))
                            mm, ss = divmod(total, 60)
                            hh, mm = divmod(mm, 60)
                            local_str = target.astimezone(local_tz).strftime('%H:%M:%S')
                            self.logger.info(
                                f"‚è± Pr√≥xima verificaci√≥n en {hh:02d}:{mm:02d}:{ss:02d} "
                                f"(UTC {target.strftime('%H:%M:%S')} | Local {local_str})"
                            )
                        except Exception:
                            pass

                    time.sleep(max(1, int(plan["wait_seconds"])))
                else:
                    time.sleep(self.cycle_seconds)
            except Exception as e:
                self.logger.exception(f"‚ùå Error en loop principal: {e}")
                time.sleep(max(5, self.cycle_seconds))
        shutdown_mt5(self.logger)
        self._print_final_stats()
        self.logger.info("üõë Bot detenido correctamente.")


# ---------- MAIN ----------
if __name__ == "__main__":
    bot = OrchestratedMT5Bot(
        config_path="configs/global_config.json",
        risk_path="configs/risk_config.json",
        orch_cfg_path="orchestrator_config.json",
        insights_path="reports/global_insights.json",
        base_lots=0.10,
        cycle_seconds=30,
    )
    bot.run()